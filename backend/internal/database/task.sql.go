// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: task.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createTask = `-- name: CreateTask :one
INSERT INTO task(task_epic_id,task_id,task_name,task_req,task_start_date,task_end_date,task_status)
VALUES ($1,$2,$3,$4,$5,$6,$7)
RETURNING task_epic_id, task_id, task_name, task_req, task_log, task_link, task_start_date, task_end_date, task_status, task_sprint_id
`

type CreateTaskParams struct {
	TaskEpicID    uuid.UUID
	TaskID        uuid.UUID
	TaskName      string
	TaskReq       string
	TaskStartDate time.Time
	TaskEndDate   sql.NullTime
	TaskStatus    string
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.TaskEpicID,
		arg.TaskID,
		arg.TaskName,
		arg.TaskReq,
		arg.TaskStartDate,
		arg.TaskEndDate,
		arg.TaskStatus,
	)
	var i Task
	err := row.Scan(
		&i.TaskEpicID,
		&i.TaskID,
		&i.TaskName,
		&i.TaskReq,
		&i.TaskLog,
		&i.TaskLink,
		&i.TaskStartDate,
		&i.TaskEndDate,
		&i.TaskStatus,
		&i.TaskSprintID,
	)
	return i, err
}

const updateTaskEndDate = `-- name: UpdateTaskEndDate :one
UPDATE task
SET task_end_date=$3
WHERE task_epic_id=$1 AND task_id=$2
RETURNING task_epic_id, task_id, task_name, task_req, task_log, task_link, task_start_date, task_end_date, task_status, task_sprint_id
`

type UpdateTaskEndDateParams struct {
	TaskEpicID  uuid.UUID
	TaskID      uuid.UUID
	TaskEndDate sql.NullTime
}

func (q *Queries) UpdateTaskEndDate(ctx context.Context, arg UpdateTaskEndDateParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTaskEndDate, arg.TaskEpicID, arg.TaskID, arg.TaskEndDate)
	var i Task
	err := row.Scan(
		&i.TaskEpicID,
		&i.TaskID,
		&i.TaskName,
		&i.TaskReq,
		&i.TaskLog,
		&i.TaskLink,
		&i.TaskStartDate,
		&i.TaskEndDate,
		&i.TaskStatus,
		&i.TaskSprintID,
	)
	return i, err
}

const updateTaskLink = `-- name: UpdateTaskLink :one
UPDATE task
SET task_link=$3
WHERE task_epic_id=$1 AND task_id=$2
RETURNING task_epic_id, task_id, task_name, task_req, task_log, task_link, task_start_date, task_end_date, task_status, task_sprint_id
`

type UpdateTaskLinkParams struct {
	TaskEpicID uuid.UUID
	TaskID     uuid.UUID
	TaskLink   sql.NullString
}

func (q *Queries) UpdateTaskLink(ctx context.Context, arg UpdateTaskLinkParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTaskLink, arg.TaskEpicID, arg.TaskID, arg.TaskLink)
	var i Task
	err := row.Scan(
		&i.TaskEpicID,
		&i.TaskID,
		&i.TaskName,
		&i.TaskReq,
		&i.TaskLog,
		&i.TaskLink,
		&i.TaskStartDate,
		&i.TaskEndDate,
		&i.TaskStatus,
		&i.TaskSprintID,
	)
	return i, err
}

const updateTaskLog = `-- name: UpdateTaskLog :one
UPDATE task
SET task_log=$3
WHERE task_epic_id=$1 AND task_id=$2
RETURNING task_epic_id, task_id, task_name, task_req, task_log, task_link, task_start_date, task_end_date, task_status, task_sprint_id
`

type UpdateTaskLogParams struct {
	TaskEpicID uuid.UUID
	TaskID     uuid.UUID
	TaskLog    sql.NullString
}

func (q *Queries) UpdateTaskLog(ctx context.Context, arg UpdateTaskLogParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTaskLog, arg.TaskEpicID, arg.TaskID, arg.TaskLog)
	var i Task
	err := row.Scan(
		&i.TaskEpicID,
		&i.TaskID,
		&i.TaskName,
		&i.TaskReq,
		&i.TaskLog,
		&i.TaskLink,
		&i.TaskStartDate,
		&i.TaskEndDate,
		&i.TaskStatus,
		&i.TaskSprintID,
	)
	return i, err
}

const updateTaskSprintID = `-- name: UpdateTaskSprintID :one
UPDATE task
SET task_sprint_id=$3
WHERE task_epic_id=$1 AND task_id=$2
RETURNING task_epic_id, task_id, task_name, task_req, task_log, task_link, task_start_date, task_end_date, task_status, task_sprint_id
`

type UpdateTaskSprintIDParams struct {
	TaskEpicID   uuid.UUID
	TaskID       uuid.UUID
	TaskSprintID sql.NullInt32
}

func (q *Queries) UpdateTaskSprintID(ctx context.Context, arg UpdateTaskSprintIDParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTaskSprintID, arg.TaskEpicID, arg.TaskID, arg.TaskSprintID)
	var i Task
	err := row.Scan(
		&i.TaskEpicID,
		&i.TaskID,
		&i.TaskName,
		&i.TaskReq,
		&i.TaskLog,
		&i.TaskLink,
		&i.TaskStartDate,
		&i.TaskEndDate,
		&i.TaskStatus,
		&i.TaskSprintID,
	)
	return i, err
}

const updateTaskStatus = `-- name: UpdateTaskStatus :one
UPDATE task
SET task_status=$3
WHERE task_epic_id=$1 AND task_id=$2
RETURNING task_epic_id, task_id, task_name, task_req, task_log, task_link, task_start_date, task_end_date, task_status, task_sprint_id
`

type UpdateTaskStatusParams struct {
	TaskEpicID uuid.UUID
	TaskID     uuid.UUID
	TaskStatus string
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTaskStatus, arg.TaskEpicID, arg.TaskID, arg.TaskStatus)
	var i Task
	err := row.Scan(
		&i.TaskEpicID,
		&i.TaskID,
		&i.TaskName,
		&i.TaskReq,
		&i.TaskLog,
		&i.TaskLink,
		&i.TaskStartDate,
		&i.TaskEndDate,
		&i.TaskStatus,
		&i.TaskSprintID,
	)
	return i, err
}
