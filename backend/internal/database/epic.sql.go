// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: epic.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createEpic = `-- name: CreateEpic :one
INSERT INTO epic (epic_id,epic_name,epic_description,epic_features,epic_link,epic_start_date,epic_end_date,epic_owner)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8)
RETURNING epic_id, epic_name, epic_description, epic_features, epic_link, epic_start_date, epic_end_date, epic_owner
`

type CreateEpicParams struct {
	EpicID          uuid.UUID
	EpicName        string
	EpicDescription string
	EpicFeatures    string
	EpicLink        sql.NullString
	EpicStartDate   time.Time
	EpicEndDate     sql.NullTime
	EpicOwner       uuid.UUID
}

func (q *Queries) CreateEpic(ctx context.Context, arg CreateEpicParams) (Epic, error) {
	row := q.db.QueryRowContext(ctx, createEpic,
		arg.EpicID,
		arg.EpicName,
		arg.EpicDescription,
		arg.EpicFeatures,
		arg.EpicLink,
		arg.EpicStartDate,
		arg.EpicEndDate,
		arg.EpicOwner,
	)
	var i Epic
	err := row.Scan(
		&i.EpicID,
		&i.EpicName,
		&i.EpicDescription,
		&i.EpicFeatures,
		&i.EpicLink,
		&i.EpicStartDate,
		&i.EpicEndDate,
		&i.EpicOwner,
	)
	return i, err
}

const deleteEpic = `-- name: DeleteEpic :exec
DELETE FROM epic
WHERE epic_id=$1
`

func (q *Queries) DeleteEpic(ctx context.Context, epicID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEpic, epicID)
	return err
}

const updateEpic = `-- name: UpdateEpic :exec
UPDATE epic
SET epic_description=$2,epic_features=$3,epic_end_date=$4
WHERE epic_id=$1
`

type UpdateEpicParams struct {
	EpicID          uuid.UUID
	EpicDescription string
	EpicFeatures    string
	EpicEndDate     sql.NullTime
}

func (q *Queries) UpdateEpic(ctx context.Context, arg UpdateEpicParams) error {
	_, err := q.db.ExecContext(ctx, updateEpic,
		arg.EpicID,
		arg.EpicDescription,
		arg.EpicFeatures,
		arg.EpicEndDate,
	)
	return err
}
