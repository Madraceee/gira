// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: role.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createMasterEpicRole = `-- name: CreateMasterEpicRole :one
INSERT INTO role (role_epic_id,role_name,role_category)
VALUES ($1,$2,'EPIC')
RETURNING role_id, role_epic_id, role_name, role_category
`

type CreateMasterEpicRoleParams struct {
	RoleEpicID uuid.UUID
	RoleName   string
}

func (q *Queries) CreateMasterEpicRole(ctx context.Context, arg CreateMasterEpicRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createMasterEpicRole, arg.RoleEpicID, arg.RoleName)
	var i Role
	err := row.Scan(
		&i.RoleID,
		&i.RoleEpicID,
		&i.RoleName,
		&i.RoleCategory,
	)
	return i, err
}

const createTaskRole = `-- name: CreateTaskRole :one
INSERT INTO role (role_epic_id,role_name,role_category)
VALUES ($1,$2,'TASK')
RETURNING role_id, role_epic_id, role_name, role_category
`

type CreateTaskRoleParams struct {
	RoleEpicID uuid.UUID
	RoleName   string
}

func (q *Queries) CreateTaskRole(ctx context.Context, arg CreateTaskRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createTaskRole, arg.RoleEpicID, arg.RoleName)
	var i Role
	err := row.Scan(
		&i.RoleID,
		&i.RoleEpicID,
		&i.RoleName,
		&i.RoleCategory,
	)
	return i, err
}
