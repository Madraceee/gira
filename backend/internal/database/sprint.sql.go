// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: sprint.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSprint = `-- name: CreateSprint :one
INSERT INTO sprint (sprint_epic_id,sprint_id,sprint_start_date,sprint_end_date)
VALUES ($1, (SELECT COUNT(*) FROM sprint WHERE sprint_epic_id=$1)+1, $2,$3)
RETURNING sprint_epic_id, sprint_id, sprint_start_date, sprint_end_date
`

type CreateSprintParams struct {
	SprintEpicID    uuid.UUID
	SprintStartDate time.Time
	SprintEndDate   time.Time
}

func (q *Queries) CreateSprint(ctx context.Context, arg CreateSprintParams) (Sprint, error) {
	row := q.db.QueryRowContext(ctx, createSprint, arg.SprintEpicID, arg.SprintStartDate, arg.SprintEndDate)
	var i Sprint
	err := row.Scan(
		&i.SprintEpicID,
		&i.SprintID,
		&i.SprintStartDate,
		&i.SprintEndDate,
	)
	return i, err
}

const deleteSprint = `-- name: DeleteSprint :exec
DELETE from sprint
WHERE sprint_id=$1 AND sprint_epic_id=$2
`

type DeleteSprintParams struct {
	SprintID     int32
	SprintEpicID uuid.UUID
}

func (q *Queries) DeleteSprint(ctx context.Context, arg DeleteSprintParams) error {
	_, err := q.db.ExecContext(ctx, deleteSprint, arg.SprintID, arg.SprintEpicID)
	return err
}

const getSprintWithOwner = `-- name: GetSprintWithOwner :one
SELECT sprint_id, epic_id , epic_owner FROM sprint
JOIN epic
ON sprint_epic_id = epic_id
WHERE epic_id=$1 AND sprint_id=$2
`

type GetSprintWithOwnerParams struct {
	EpicID   uuid.UUID
	SprintID int32
}

type GetSprintWithOwnerRow struct {
	SprintID  int32
	EpicID    uuid.UUID
	EpicOwner uuid.UUID
}

func (q *Queries) GetSprintWithOwner(ctx context.Context, arg GetSprintWithOwnerParams) (GetSprintWithOwnerRow, error) {
	row := q.db.QueryRowContext(ctx, getSprintWithOwner, arg.EpicID, arg.SprintID)
	var i GetSprintWithOwnerRow
	err := row.Scan(&i.SprintID, &i.EpicID, &i.EpicOwner)
	return i, err
}

const getSprintsOfEpic = `-- name: GetSprintsOfEpic :many
SELECT sprint_id, sprint_start_date, sprint_end_date FROM sprint
JOIN epic_members
ON sprint_epic_id = epic_members_epic_id
WHERE epic_members_epic_id=$1 AND epic_members_user_id=$2
ORDER BY sprint_start_date
`

type GetSprintsOfEpicParams struct {
	EpicMembersEpicID uuid.UUID
	EpicMembersUserID uuid.UUID
}

type GetSprintsOfEpicRow struct {
	SprintID        int32
	SprintStartDate time.Time
	SprintEndDate   time.Time
}

func (q *Queries) GetSprintsOfEpic(ctx context.Context, arg GetSprintsOfEpicParams) ([]GetSprintsOfEpicRow, error) {
	rows, err := q.db.QueryContext(ctx, getSprintsOfEpic, arg.EpicMembersEpicID, arg.EpicMembersUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSprintsOfEpicRow
	for rows.Next() {
		var i GetSprintsOfEpicRow
		if err := rows.Scan(&i.SprintID, &i.SprintStartDate, &i.SprintEndDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
