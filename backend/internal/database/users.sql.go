// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const activateAccount = `-- name: ActivateAccount :exec
UPDATE users
SET users_account_status='ACTIVE'
WHERE users_id=$1
`

func (q *Queries) ActivateAccount(ctx context.Context, usersID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, activateAccount, usersID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (users_id,users_email,users_name,users_account_status,users_type,users_password)
VALUES ($1,$2,$3,$4,$5,$6)
RETURNING users_id, users_email, users_name, users_account_status, users_type, users_password
`

type CreateUserParams struct {
	UsersID            uuid.UUID
	UsersEmail         string
	UsersName          string
	UsersAccountStatus string
	UsersType          string
	UsersPassword      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UsersID,
		arg.UsersEmail,
		arg.UsersName,
		arg.UsersAccountStatus,
		arg.UsersType,
		arg.UsersPassword,
	)
	var i User
	err := row.Scan(
		&i.UsersID,
		&i.UsersEmail,
		&i.UsersName,
		&i.UsersAccountStatus,
		&i.UsersType,
		&i.UsersPassword,
	)
	return i, err
}

const deactivateAccount = `-- name: DeactivateAccount :exec
UPDATE users
SET users_account_status='DEACTIVE'
WHERE users_id=$1
`

func (q *Queries) DeactivateAccount(ctx context.Context, usersID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deactivateAccount, usersID)
	return err
}

const getEpicMembers = `-- name: GetEpicMembers :many
SELECT users_name,users_email FROM users
JOIN epic_members
ON users_id=epic_members_user_id
WHERE epic_members_epic_id=$1
`

type GetEpicMembersRow struct {
	UsersName  string
	UsersEmail string
}

func (q *Queries) GetEpicMembers(ctx context.Context, epicMembersEpicID uuid.UUID) ([]GetEpicMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, getEpicMembers, epicMembersEpicID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEpicMembersRow
	for rows.Next() {
		var i GetEpicMembersRow
		if err := rows.Scan(&i.UsersName, &i.UsersEmail); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIDFromEmail = `-- name: GetIDFromEmail :one
SELECT users_id FROM users
WHERE users_email=$1
`

func (q *Queries) GetIDFromEmail(ctx context.Context, usersEmail string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getIDFromEmail, usersEmail)
	var users_id uuid.UUID
	err := row.Scan(&users_id)
	return users_id, err
}

const login = `-- name: Login :one
SELECT users_id, users_email, users_name, users_account_status, users_type, users_password FROM users
WHERE users_email=$1
`

func (q *Queries) Login(ctx context.Context, usersEmail string) (User, error) {
	row := q.db.QueryRowContext(ctx, login, usersEmail)
	var i User
	err := row.Scan(
		&i.UsersID,
		&i.UsersEmail,
		&i.UsersName,
		&i.UsersAccountStatus,
		&i.UsersType,
		&i.UsersPassword,
	)
	return i, err
}
