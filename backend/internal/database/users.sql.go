// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const activateAccount = `-- name: ActivateAccount :exec
UPDATE users
SET users_account_status="ACTIVE"
WHERE users_id=$1
`

func (q *Queries) ActivateAccount(ctx context.Context, usersID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, activateAccount, usersID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (users_id,users_email,users_name,users_account_status,users_type,users_password)
VALUES ($1,$2,$3,$4,$5,$6)
RETURNING users_id, users_email, users_name, users_account_status, users_type, users_password
`

type CreateUserParams struct {
	UsersID            uuid.UUID
	UsersEmail         string
	UsersName          string
	UsersAccountStatus string
	UsersType          string
	UsersPassword      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UsersID,
		arg.UsersEmail,
		arg.UsersName,
		arg.UsersAccountStatus,
		arg.UsersType,
		arg.UsersPassword,
	)
	var i User
	err := row.Scan(
		&i.UsersID,
		&i.UsersEmail,
		&i.UsersName,
		&i.UsersAccountStatus,
		&i.UsersType,
		&i.UsersPassword,
	)
	return i, err
}

const deactivateAccount = `-- name: DeactivateAccount :exec
UPDATE users
SET users_account_status="DEACTIVE"
WHERE users_id=$1
`

func (q *Queries) DeactivateAccount(ctx context.Context, usersID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deactivateAccount, usersID)
	return err
}

const login = `-- name: Login :one
SELECT users_id, users_email, users_name, users_account_status, users_type, users_password FROM users
WHERE users_email=$1
`

func (q *Queries) Login(ctx context.Context, usersEmail string) (User, error) {
	row := q.db.QueryRowContext(ctx, login, usersEmail)
	var i User
	err := row.Scan(
		&i.UsersID,
		&i.UsersEmail,
		&i.UsersName,
		&i.UsersAccountStatus,
		&i.UsersType,
		&i.UsersPassword,
	)
	return i, err
}
