// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: epic_members.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const checkMemberInEpic = `-- name: CheckMemberInEpic :one
SELECT epic_members_user_id, epic_members_epic_id FROM epic_members
WHERE epic_members_epic_id=$1 AND epic_members_user_id=$2
`

type CheckMemberInEpicParams struct {
	EpicMembersEpicID uuid.UUID
	EpicMembersUserID uuid.UUID
}

func (q *Queries) CheckMemberInEpic(ctx context.Context, arg CheckMemberInEpicParams) (EpicMember, error) {
	row := q.db.QueryRowContext(ctx, checkMemberInEpic, arg.EpicMembersEpicID, arg.EpicMembersUserID)
	var i EpicMember
	err := row.Scan(&i.EpicMembersUserID, &i.EpicMembersEpicID)
	return i, err
}

const getEpic = `-- name: GetEpic :one
SELECT epic_id, epic_name, epic_description, epic_features, epic_link, epic_start_date, epic_end_date, epic_owner, epic_members_user_id, epic_members_epic_id FROM epic
JOIN epic_members
ON epic_id=epic_members_epic_id
WHERE epic_members_user_id=$1 AND epic_id=$2
`

type GetEpicParams struct {
	EpicMembersUserID uuid.UUID
	EpicID            uuid.UUID
}

type GetEpicRow struct {
	EpicID            uuid.UUID
	EpicName          string
	EpicDescription   string
	EpicFeatures      string
	EpicLink          sql.NullString
	EpicStartDate     time.Time
	EpicEndDate       sql.NullTime
	EpicOwner         uuid.UUID
	EpicMembersUserID uuid.UUID
	EpicMembersEpicID uuid.UUID
}

func (q *Queries) GetEpic(ctx context.Context, arg GetEpicParams) (GetEpicRow, error) {
	row := q.db.QueryRowContext(ctx, getEpic, arg.EpicMembersUserID, arg.EpicID)
	var i GetEpicRow
	err := row.Scan(
		&i.EpicID,
		&i.EpicName,
		&i.EpicDescription,
		&i.EpicFeatures,
		&i.EpicLink,
		&i.EpicStartDate,
		&i.EpicEndDate,
		&i.EpicOwner,
		&i.EpicMembersUserID,
		&i.EpicMembersEpicID,
	)
	return i, err
}

const getEpicsOfUser = `-- name: GetEpicsOfUser :many
SELECT epic_id,epic_name FROM epic
JOIN epic_members
ON epic_id=epic_members_epic_id
WHERE epic_members_user_id=$1
`

type GetEpicsOfUserRow struct {
	EpicID   uuid.UUID
	EpicName string
}

func (q *Queries) GetEpicsOfUser(ctx context.Context, epicMembersUserID uuid.UUID) ([]GetEpicsOfUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getEpicsOfUser, epicMembersUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEpicsOfUserRow
	for rows.Next() {
		var i GetEpicsOfUserRow
		if err := rows.Scan(&i.EpicID, &i.EpicName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEpicMember = `-- name: InsertEpicMember :one
INSERT INTO epic_members (epic_members_epic_id,epic_members_user_id)
VALUES ($1,(SELECT users_id FROM users WHERE users_email=$2))
RETURNING epic_members_user_id, epic_members_epic_id
`

type InsertEpicMemberParams struct {
	EpicMembersEpicID uuid.UUID
	UsersEmail        string
}

func (q *Queries) InsertEpicMember(ctx context.Context, arg InsertEpicMemberParams) (EpicMember, error) {
	row := q.db.QueryRowContext(ctx, insertEpicMember, arg.EpicMembersEpicID, arg.UsersEmail)
	var i EpicMember
	err := row.Scan(&i.EpicMembersUserID, &i.EpicMembersEpicID)
	return i, err
}

const removeMember = `-- name: RemoveMember :exec
DELETE FROM epic_members
WHERE epic_members_epic_id=$1 AND epic_members_user_id=$2
`

type RemoveMemberParams struct {
	EpicMembersEpicID uuid.UUID
	EpicMembersUserID uuid.UUID
}

func (q *Queries) RemoveMember(ctx context.Context, arg RemoveMemberParams) error {
	_, err := q.db.ExecContext(ctx, removeMember, arg.EpicMembersEpicID, arg.EpicMembersUserID)
	return err
}
